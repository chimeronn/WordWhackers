/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.keycoil;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JOptionPane;

/**
 *
 * @author camer
 */
//This is the main window that stores everything in this program
public class WordWhackers extends javax.swing.JFrame implements ActionListener, KeyListener, Runnable{
    
    private static int numWords; //Number of words in the typing test
    private boolean running = true;
    private boolean ended = false;
    private boolean restart = true;
    private ArrayList<String> words; //Array list that stores the words in the typing test
    private String whole = ""; //Puts every word in the typing test into this string
    private int charsTyped = 0; //Number of characters that the use has typed
    private String typed = ""; //Everything that the user has typed into a string
    private boolean typo = false; //Returns true when the user makes a typo
    //Timer timer;
    private int chars = 0; //The number of chars in the whole typing test
    //long startTime = 0;
    //long endTime = 0;
    private boolean timerStart = false; //Returns true if the test has been started
    private int seconds = 0; //The number of seconds that has passed since the beginning of the typing test
    public static boolean isNew = true;
    
    public static AudioInputStream ais;
    public static Clip clip;
    //Used to load the music
    
    private Color panedefault; //The color of a sidebar tab when it is not clicked
    private Color paneClick; //The color of a sidebar tab when it is clicked
    
    public WordWhackers() throws IOException {
        
        try {
            //Tries to find the music file
            ais = AudioSystem.getAudioInputStream(new File("src\\" + Settings.music + ".wav"));
            try {
                
                //Tries to save the music file into a Clip class
                clip = AudioSystem.getClip();
                clip.open(ais);
                
            } catch (LineUnavailableException ex) {
                Logger.getLogger(WordWhackers.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //Starts the music
            clip.start();
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(WordWhackers.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Instantiates the colors for the sidebar tabs
        panedefault = new Color(102, 0, 51);
        paneClick = new Color(90, 0, 30);
        
        if(running){
            this.repaint();
        }
        if(ended){
            this.repaint();
        }
        initComponents();
        
        
        
        /*
        AudioInputStream ais = AudioSystem.getAudioInputStream(new File("src\\" + Settings.music + ".wav"));
            Clip clip = AudioSystem.getClip();
                clip.open(ais);
                clip.start();
                clip.stop();
        */
        
        this.setLayout(new BorderLayout());
        this.setSize(720, 400);
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        this.setFocusable(true);
        this.addKeyListener(this);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.getContentPane().setBackground(Color.darkGray);
        
        Home home = new Home();
        DesktopPane.add(home);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topBarPanel = new javax.swing.JPanel();
        sidebarPanel = new javax.swing.JPanel();
        homePanel = new javax.swing.JPanel();
        homeSidePanel = new javax.swing.JPanel();
        homeLabel = new javax.swing.JLabel();
        wwPanel = new javax.swing.JPanel();
        wwSidePanel = new javax.swing.JPanel();
        wwLabel = new javax.swing.JLabel();
        trainingPanel = new javax.swing.JPanel();
        trainingSidePanel = new javax.swing.JPanel();
        trainingLabel = new javax.swing.JLabel();
        settingsPanel = new javax.swing.JPanel();
        settingsSidePanel = new javax.swing.JPanel();
        settingsLabel = new javax.swing.JLabel();
        DesktopPane = new javax.swing.JDesktopPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        topBarPanel.setBackground(new java.awt.Color(23, 45, 51));

        javax.swing.GroupLayout topBarPanelLayout = new javax.swing.GroupLayout(topBarPanel);
        topBarPanel.setLayout(topBarPanelLayout);
        topBarPanelLayout.setHorizontalGroup(
            topBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );
        topBarPanelLayout.setVerticalGroup(
            topBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );

        getContentPane().add(topBarPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, -1));

        sidebarPanel.setBackground(new java.awt.Color(194, 12, 60));

        homePanel.setBackground(new java.awt.Color(102, 0, 51));
        homePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homePanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout homeSidePanelLayout = new javax.swing.GroupLayout(homeSidePanel);
        homeSidePanel.setLayout(homeSidePanelLayout);
        homeSidePanelLayout.setHorizontalGroup(
            homeSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        homeSidePanelLayout.setVerticalGroup(
            homeSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );

        homeLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        homeLabel.setForeground(new java.awt.Color(242, 242, 242));
        homeLabel.setText("Home");

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addComponent(homeSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(homeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addComponent(homeSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(homeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        wwPanel.setBackground(new java.awt.Color(102, 0, 51));
        wwPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wwPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout wwSidePanelLayout = new javax.swing.GroupLayout(wwSidePanel);
        wwSidePanel.setLayout(wwSidePanelLayout);
        wwSidePanelLayout.setHorizontalGroup(
            wwSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        wwSidePanelLayout.setVerticalGroup(
            wwSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );

        wwLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        wwLabel.setForeground(new java.awt.Color(242, 242, 242));
        wwLabel.setText("Word Whackers");

        javax.swing.GroupLayout wwPanelLayout = new javax.swing.GroupLayout(wwPanel);
        wwPanel.setLayout(wwPanelLayout);
        wwPanelLayout.setHorizontalGroup(
            wwPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wwPanelLayout.createSequentialGroup()
                .addComponent(wwSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wwLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        wwPanelLayout.setVerticalGroup(
            wwPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wwPanelLayout.createSequentialGroup()
                .addComponent(wwSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(wwPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(wwLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        trainingPanel.setBackground(new java.awt.Color(102, 0, 51));
        trainingPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                trainingPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout trainingSidePanelLayout = new javax.swing.GroupLayout(trainingSidePanel);
        trainingSidePanel.setLayout(trainingSidePanelLayout);
        trainingSidePanelLayout.setHorizontalGroup(
            trainingSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 12, Short.MAX_VALUE)
        );
        trainingSidePanelLayout.setVerticalGroup(
            trainingSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );

        trainingLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        trainingLabel.setForeground(new java.awt.Color(242, 242, 242));
        trainingLabel.setText("Training");

        javax.swing.GroupLayout trainingPanelLayout = new javax.swing.GroupLayout(trainingPanel);
        trainingPanel.setLayout(trainingPanelLayout);
        trainingPanelLayout.setHorizontalGroup(
            trainingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trainingPanelLayout.createSequentialGroup()
                .addComponent(trainingSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trainingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        trainingPanelLayout.setVerticalGroup(
            trainingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trainingPanelLayout.createSequentialGroup()
                .addComponent(trainingSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(trainingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trainingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        settingsPanel.setBackground(new java.awt.Color(102, 0, 51));
        settingsPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                settingsPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout settingsSidePanelLayout = new javax.swing.GroupLayout(settingsSidePanel);
        settingsSidePanel.setLayout(settingsSidePanelLayout);
        settingsSidePanelLayout.setHorizontalGroup(
            settingsSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 12, Short.MAX_VALUE)
        );
        settingsSidePanelLayout.setVerticalGroup(
            settingsSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );

        settingsLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        settingsLabel.setForeground(new java.awt.Color(242, 242, 242));
        settingsLabel.setText("Settings");

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addComponent(settingsSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addComponent(settingsSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settingsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout sidebarPanelLayout = new javax.swing.GroupLayout(sidebarPanel);
        sidebarPanel.setLayout(sidebarPanelLayout);
        sidebarPanelLayout.setHorizontalGroup(
            sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(wwPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(sidebarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(trainingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        sidebarPanelLayout.setVerticalGroup(
            sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(homePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(wwPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(trainingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(settingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(336, Short.MAX_VALUE))
        );

        getContentPane().add(sidebarPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 30, 130, 550));

        javax.swing.GroupLayout DesktopPaneLayout = new javax.swing.GroupLayout(DesktopPane);
        DesktopPane.setLayout(DesktopPaneLayout);
        DesktopPaneLayout.setHorizontalGroup(
            DesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 810, Short.MAX_VALUE)
        );
        DesktopPaneLayout.setVerticalGroup(
            DesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );

        getContentPane().add(DesktopPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 810, 560));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //If the Typing Test sidebar tab has been clicked
    private void wwPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wwPanelMouseClicked
        //Removes all internal frames from the Desktop Pane so multiple frames are not running simulatenously
        DesktopPane.removeAll();
        
        //Intitializes the typing test
        WordWhackersInternal wwp = new WordWhackersInternal(10, false);
        
        //Adds the typing test to the Desktop Pane
        DesktopPane.add(wwp); 
        
        //Sets the color of the sidebar tab of the typing test sidebar to different than the other ones
        homePanel.setBackground(panedefault);
        wwPanel.setBackground(paneClick);     
        trainingPanel.setBackground(panedefault);
        settingsPanel.setBackground(panedefault); 
    }//GEN-LAST:event_wwPanelMouseClicked

    //If the home panel sidebar tab has been clicked
    private void homePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homePanelMouseClicked
        //Removes all internal frames from the Desktop Pane so multiple frames are not running simulatenously
        DesktopPane.removeAll();
        Home home;
        
        try {
            
            //Intiailizes the Home menu frame
            home = new Home();
            
            //Adds the home menu frame to the Desktop Pane
            DesktopPane.add(home);
            
            //Sets the color of the sidebar tab of the home menu sidebar to different than the other ones
            homePanel.setBackground(paneClick);
            wwPanel.setBackground(panedefault);
            trainingPanel.setBackground(panedefault);
            settingsPanel.setBackground(panedefault);
            
        } catch (IOException ex) {
            
            Logger.getLogger(WordWhackers.class.getName()).log(Level.SEVERE, null, ex);
            
        }
        
    }//GEN-LAST:event_homePanelMouseClicked

    //If the training sidebar tab has been clicked
    private void trainingPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trainingPanelMouseClicked
        //Removes all internal frames from the Desktop Pane so multiple frames are not running simulatenously
        DesktopPane.removeAll();
        
        //Sets the color of the sidebar tab of the home menu sidebar to different than the other ones
        homePanel.setBackground(panedefault);
        wwPanel.setBackground(panedefault);
        trainingPanel.setBackground(paneClick);
        settingsPanel.setBackground(panedefault);
        
        //Initializes both Play5Games and WeaknessDetection depending on if the user has played 5 games or not
        Play5Games p;
        WeaknessDetection w;
        WordWhackersInternal x;
        
        //If the user has not played 5 games then instantiate Play5Games and add it to the Desktop Pane
        if(Profile.numGames < 5){
            
            p = new Play5Games();
            DesktopPane.add(p);
            
        }
        
        //Otherwise instantiate WordWhackersInternal (Typing Test) and add it to the Desktop Pane
        else{           
            
            DesktopPane.removeAll();
            w = new WeaknessDetection();
            DesktopPane.add(w);
            
        }
    }//GEN-LAST:event_trainingPanelMouseClicked

    //If the Settings sidebar tab has been clicked
    private void settingsPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingsPanelMouseClicked
        //Removes all internal frames from the Desktop Pane so multiple frames are not running simulatenously
        DesktopPane.removeAll();
        
        //Sets the color of the sidebar tab of the home menu sidebar to different than the other ones
        homePanel.setBackground(panedefault);
        wwPanel.setBackground(panedefault);
        trainingPanel.setBackground(panedefault);
        settingsPanel.setBackground(paneClick);
        
        //Intitializes the settings class
        Settings s = new Settings();
        
        //Add the settings frame to the Desktop Pane
        DesktopPane.add(s);
    }//GEN-LAST:event_settingsPanelMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WordWhackers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WordWhackers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WordWhackers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WordWhackers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    
                    new WordWhackers().setVisible(true);
                    
                } catch (IOException ex) {
                    
                    Logger.getLogger(WordWhackers.class.getName()).log(Level.SEVERE, null, ex);
                    
                }
            }
        });
    }
    
    @Override
    //Used to repaint the GUI
    public void paint(Graphics g){
        super.paint(g);
    }
    
    //Helper method for paint
    public void draw(Graphics g){
        
        if(restart){
            
            words = new ArrayList<>();
            Dictionary d = new Dictionary();
            
            for(int i = 0; i < numWords; i++){
                
                words.add(d.getRandomWord());
                
            }
            restart = false;
                        
            for (int i = 0; i < numWords - 1; i++) {
                
                whole += words.get(i) + " ";
                chars += words.get(i).length();
                
            }
            
            whole += words.get(numWords - 1);
            chars += words.get(numWords - 1).length();
        }
                
        g.setFont(new Font("MV Boli", Font.BOLD, getWidth() / 30));
        
        if(running){
            int end = 37 + typed.length();
            
            if(end > whole.length())
                end = whole.length();
            
            g.drawString(whole.substring(typed.length(), end), getWidth() / 8, getHeight() / 2);
            
            /*g.setColor(Color.GREEN);
            if (typed.length() > 0) {
                g.drawString(typed, getWidth() / 8, getHeight() / 2);
            }*/
            
            if(typo){
                g.setColor(Color.RED);
                g.drawString(whole.substring(typed.length(), typed.length() + 1), getWidth() / 8, getHeight() / 2);
                typo = false;
            }
            
            if(typed.length() == whole.length()){
                
                timerStart = false;
                running = false;
                double words = chars / 4.7;
                double mins = seconds / 60;
                double wpm = words / seconds * 60;
                
                //System.out.println(wpm);
                
                //System.out.println(mins);
                JOptionPane.showMessageDialog(null, (int) wpm + " WPM", "Words Per Minute", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    int count = 0;
    
    @Override
    public void keyTyped(KeyEvent e) {
        count++;
        
        if(count == 1){
            
            new Thread(this, "timer").start();
            System.out.println(count);
            timerStart = true;
            
        }
        
        revalidate();
        repaint();
        
        if(whole.length() > 0){
            
            char[] wordChars = whole.toCharArray();
            
            if(charsTyped < wordChars.length){
                
                running = true;
                
                if(e.getKeyChar() == wordChars[charsTyped]){
                    
                    typed = typed + wordChars[charsTyped];
                    charsTyped++;
                    //System.out.println(typed);
                }
                else{
                    typo = true;
                }
            }
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if(e.getKeyCode() >= 65 && e.getKeyCode() <= 90 && running == false){
        }
        
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }
    
    @Override
    public void run(){
        while(timerStart){
            
            try{
                
                //System.out.println(seconds);
                Thread.sleep(1000);
                seconds++;
                
            }
            catch(InterruptedException e){
                System.out.println(e);
            }
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane DesktopPane;
    private javax.swing.JLabel homeLabel;
    private javax.swing.JPanel homePanel;
    private javax.swing.JPanel homeSidePanel;
    private javax.swing.JLabel settingsLabel;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JPanel settingsSidePanel;
    private javax.swing.JPanel sidebarPanel;
    private javax.swing.JPanel topBarPanel;
    private javax.swing.JLabel trainingLabel;
    private javax.swing.JPanel trainingPanel;
    private javax.swing.JPanel trainingSidePanel;
    private javax.swing.JLabel wwLabel;
    private javax.swing.JPanel wwPanel;
    private javax.swing.JPanel wwSidePanel;
    // End of variables declaration//GEN-END:variables
}
