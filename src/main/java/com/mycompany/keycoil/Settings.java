/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.mycompany.keycoil;

import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import static javax.swing.WindowConstants.EXIT_ON_CLOSE;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author camer
 */
//This frame is used to change the music of the program
public class Settings extends javax.swing.JInternalFrame implements KeyListener{

    /**
     * Creates new form Settings
     */
    
    //public static float volume = 0;
    public static String music = "Default"; //The default menu music is played when the program is launched
    //static boolean switching = false;
    
    public Settings() {
        initComponents();
        
        this.setLayout(new BorderLayout());
        this.setSize(585, 325);
        this.setVisible(true);
        this.setFocusable(true);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        //this.getContentPane().setBackground(Color.darkGray);
        //this.addKeyListener(this);
        this.revalidate();
        this.getContentPane().add(musicBox); //A combo box that is used to select the music played in the background
        musicBox.setSize(20, 20);
        musicBox.addItemListener(new ItemListener(){ //This code detects if a different box has been selected in the combo box
            @Override
            public void itemStateChanged(ItemEvent e) {
                if(e.getStateChange() == ItemEvent.SELECTED){ //If the box has been changed
                    music = (String) musicBox.getSelectedItem(); //Music string is used to find the name of the file. 
                                                                 //The files are named exactly what the boxes are named in the program.
                    
                    WordWhackers.clip.stop();   //When a new box is selected, stop the current music
                try {
                    
                    WordWhackers.ais = AudioSystem.getAudioInputStream(new File("src\\" + Settings.music + ".wav")); //Searching files for the newly selected song
                    try {
                        
                        WordWhackers.clip = AudioSystem.getClip();  //If it is found then save it as a clip
                        WordWhackers.clip.open(WordWhackers.ais);
                        WordWhackers.clip.start();  //Start the song
                        
                    } catch (LineUnavailableException ex) {
                        
                        Logger.getLogger(WordWhackers.class.getName()).log(Level.SEVERE, null, ex);
                        
                    }

                } catch (UnsupportedAudioFileException ex) {
                    
                    Logger.getLogger(WordWhackers.class.getName()).log(Level.SEVERE, null, ex);
                    
                } catch (IOException ex) {
                    
                    Logger.getLogger(WordWhackers.class.getName()).log(Level.SEVERE, null, ex);
                    
                }
                }
            }
            
        });
        
        music = (String) musicBox.getSelectedItem();
        //System.out.println(music);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        musicBox = new javax.swing.JComboBox<>();
        chooseMusicLabel = new javax.swing.JLabel();
        selectButton = new javax.swing.JButton();

        musicBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Default", "HardRock", "8-Bit", "Arcade", "Arduous", "Fantasia", "Legendary", "ArcadeXTREME" }));
        musicBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musicBoxActionPerformed(evt);
            }
        });

        chooseMusicLabel.setText("Choose Music");

        selectButton.setText("Select");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(167, 167, 167)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(musicBox, 0, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chooseMusicLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(153, 153, 153))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectButton)
                .addGap(101, 101, 101)
                .addComponent(chooseMusicLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(musicBox, javax.swing.GroupLayout.PREFERRED_SIZE, 10, Short.MAX_VALUE)
                .addGap(143, 143, 143))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void musicBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musicBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_musicBoxActionPerformed

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_selectButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel chooseMusicLabel;
    private javax.swing.JComboBox<String> musicBox;
    private javax.swing.JButton selectButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent e) {
        if(e.getKeyChar() == KeyEvent.VK_ENTER){
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }
    
    public static void playSound(){
        try{
            
            AudioInputStream ais = AudioSystem.getAudioInputStream(new File("src\\" + Settings.music + ".wav"));
            Clip clip = AudioSystem.getClip();
                clip.open(ais);
                clip.start();
                clip.stop();
            
        }
        catch(Exception e){
            
            e.printStackTrace();
            
        }
    }
}
